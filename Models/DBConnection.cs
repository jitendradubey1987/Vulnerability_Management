using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
namespace Vulnerability_Management.Models
{   
   
    //public class DBConnection
    //{
    //    //private IDbCommand cmd = new SqlCommand();
    //    //private string strConnectionString = "";
    //    //private bool handleErrors = false;
    //    //private string strLastError = "";
    //    //  public DBConnection()
    //    //   {
    //    //    ConnectionStringSettings objConnectionStringSettings = ConfigurationManager.ConnectionStrings["connString"];
    //    //    strConnectionString = objConnectionStringSettings.ConnectionString;
    //    //    SqlConnection cnn = new SqlConnection();
    //    //    cnn.ConnectionString = strConnectionString;
    //    //    cmd.Connection = cnn;
    //    //    cmd.CommandType = CommandType.StoredProcedure;
    //    //}
    //}

    public class LoginView
    {
        [Required]
        [Display(Name = "User name")]
        public string UserName { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        //[Display(Name = "Remember me?")]
        //public bool RememberMe { get; set; }
    }
       public class CreateAccount
    {
        [Required]
        [Display(Name="User Email")]
        //[RegularExpression(@"^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$", ErrorMessage = "Please enter a valid e-mail adress")]
        public string UserEmail { get; set;}

        [Required]
        [Display(Name = "Password")]
        [DataType(DataType.Password)]
        [StringLength(20, ErrorMessage = "Please can not use more than 20 character")]
        [MinLength(8, ErrorMessage = "Password atleast more than 8 character")]
        public string Pass { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [StringLength(20, ErrorMessage = "Please can not use more than 20 character")]
        [MinLength(8, ErrorMessage = "Password atleast more than 8 character")]
        [Display(Name="Confirm password")]
        public string confmPass { get; set; }

        public List<CreateAccount> Courses { get; set; }


      
    }

        public class fetchinset : CreateAccount
        {
            public static int Insert(fetchinset f)
            {
                DBConnection db = new DBConnection();
                db.AddParameter("@Email",f.UserEmail);
                db.AddParameter("@Pass", f.Pass);
                db.AddParameter("@CNFpass", f.confmPass);
                int v = db.ExecuteNonQuery("CreatePro");
                if(v > 0)
                {
                    return 1;
                }
                else
                {
                    return -1;
                }


            }

            public static DataSet Fetchuser()
            {
                DBConnection db = new DBConnection();
               // return db.ExecuteReader("UserFetch");
               return db.ExecuteDataSet("UserFetch");
            }

            public static DataSet fetchPass(fetchinset fet)
            {
                DBConnection db = new DBConnection();
                db.AddParameter("@Email",fet.UserEmail);
                db.AddParameter("@Pass", fet.Pass);
                return db.ExecuteDataSet("UserLogin");
                //if(o!=null)
                //{
                //    string x = o.ToString();
                    
                //}

                //return 1;

            }
        }

        public class DBConnection
        {

        private IDbCommand cmd = new SqlCommand();
        private string strConnectionString = "";
        private bool handleErrors = false;
        private string strLastError = "";
        public DBConnection()
        {
            //
            // TODO: Add constructor logic here
            //

            ConnectionStringSettings objConnectionStringSettings = ConfigurationManager.ConnectionStrings["connString"];
            strConnectionString = objConnectionStringSettings.ConnectionString;
            SqlConnection cnn = new SqlConnection();
            cnn.ConnectionString = strConnectionString;
            cmd.Connection = cnn;
            cmd.CommandType = CommandType.StoredProcedure;
        }
        public IDataReader ExecuteReader()
        {
            IDataReader reader = null;
            try
            {
                this.Open();
                reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
            catch (Exception ex)
            {
                if (handleErrors)
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return reader;
        }

        public IDataReader ExecuteReader(string commandtext)
        {
            IDataReader reader = null;
            try
            {
                cmd.CommandText = commandtext;
                reader = this.ExecuteReader();
            }
            catch (Exception ex)
            {
                if ((handleErrors))
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return reader;
        }

        public object ExecuteScalar()
        {
            object obj = null;
            try
            {
                this.Open();
                obj = cmd.ExecuteScalar();
                this.Close();
            }
            catch (Exception ex)
            {
                if (handleErrors)
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return obj;
        }
        public object ExecuteScalar(string commandtext)
        {
            object obj = null;
            try
            {
                cmd.CommandText = commandtext;
                obj = this.ExecuteScalar();
            }
            catch (Exception ex)
            {
                if ((handleErrors))
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return obj;
        }

        public int ExecuteNonQuery()
        {
            int i = -1;
            try
            {
                this.Open();
                i = cmd.ExecuteNonQuery();
                this.Close();
            }
            catch (Exception ex)
            {
                if (handleErrors)
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return i;
        }



        public int ExecuteNonQuery(string commandtext)
        {
            int i = -1;
            try
            {
                cmd.CommandText = commandtext;
                i = this.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                if (handleErrors)
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return i;
        }
        public DataSet ExecuteDataSet()
        {
            SqlDataAdapter da = null;
            DataSet ds = null;
            try
            {
                da = new SqlDataAdapter();
                da.SelectCommand = (SqlCommand)cmd;
                ds = new DataSet();
                da.Fill(ds);
            }
            catch (Exception ex)
            {
                if ((handleErrors))
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
            }
            return ds;
        }
        public DataSet ExecuteDataSet(string commandtext)
        {
            DataSet ds = null;
            try
            {
                cmd.CommandText = commandtext;
                ds = this.ExecuteDataSet();
            }
            catch (Exception ex)
            {
                if (handleErrors)
                {
                    strLastError = ex.Message;
                }
                else
                {
                    throw;
                }
    }
            return ds;
        }

        public string CommandText
        {
            get { return cmd.CommandText; }
            set
            {
                cmd.CommandText = value;
                cmd.Parameters.Clear();
            }
        }

        public IDataParameterCollection Parameters
        {
            get { return cmd.Parameters; }
        }

        public void AddParameter(string paramname, object paramvalue)
        {
            SqlParameter param = new SqlParameter(paramname, paramvalue);
            cmd.Parameters.Add(param);
        }

        public void AddParameter(IDataParameter param)
        {
            cmd.Parameters.Add(param);
        }

        public string ConnectionString
        {
            get { return strConnectionString; }
            set { strConnectionString = value; }
        }

        private void Open()
        {
            cmd.Connection.Open();
        }

        private void Close()
        {
            cmd.Connection.Close();
        }

        public bool HandleExceptions
        {
            get { return handleErrors; }
            set { handleErrors = value; }
        }

        public string LastError
        {
            get { return strLastError; }
        }

        public void Dispose()
        {
            cmd.Dispose();
        }

    }
        
    
    
}