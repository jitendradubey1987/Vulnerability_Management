using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using Vulnerability_Management.Models;

namespace Vulnerability_Management.Controllers
{
    [Authorize]
    public class LoginController : Controller
    {
        //
        // GET: /Login/
        public ActionResult Index()
        {
            return View();
        }

        //Using for Login Page only
        [AllowAnonymous]
        public ActionResult Login(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        // POST: /Login/Login
        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginView Log, string returnUrl)
        { 
            if(ModelState.IsValid)
            {
                fetchinset f = new fetchinset();
                f.UserEmail=Log.UserName;
                f.Pass=Log.Password;
                var result =  fetchinset.fetchPass(f);
                if (result.Tables[0].Rows.Count> 0)
                {
                  return  RedirectToAction("Contact","Home");
                  //  return RedirectToAction("Contact").
                }
                else
                {

                    //return RedirectToAction("Manage", new { Message = ManageMessageId.Error });
                    ModelState.AddModelError("", "Invalid username or password.");
                 
                }
              
            }
            else
            {
                 ModelState.AddModelError("", "Invalid username or password.");
               
            }
            return View(Log);

        }

        public ActionResult Manage(ManageMessageId? message)
        {
            ViewBag.StatusMessage =
                message == ManageMessageId.ChangePasswordSuccess ? "Your password has been changed."
                : message == ManageMessageId.SetPasswordSuccess ? "Your password has been set."
                : message == ManageMessageId.RemoveLoginSuccess ? "The external login was removed."
                : message == ManageMessageId.Error ? "Invalid username or password."
                : "";
            //ViewBag.HasLocalPassword = HasPassword();
            //ViewBag.ReturnUrl = Url.Action("Manage");
            return View(ViewBag);
        }
        public enum ManageMessageId
        {
            ChangePasswordSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            Error
        }

	}
}